import UIKit
import AVFoundation
import Photos

protocol CameraCustomControllerDelegate {
    
    func fetchImageAndVideoURL(url:Any?, type:Int, error: Error!)
    
}

enum CameraMediaType: Int {
    case ImageMedia, VideoMedia
}

class CameraCustomController: UIViewController, ShowAlert {
    
    @IBOutlet fileprivate var captureButton: UIButton!
    
    ///Displays a preview of the video output generated by the device's cameras.
    @IBOutlet fileprivate var capturePreviewView: UIView!
    
    ///Allows the user to put the camera in photo mode.
    @IBOutlet fileprivate var toggleCameraButton: UIButton!
    @IBOutlet fileprivate var toggleFlashButton: UIButton!
    @IBOutlet fileprivate var toggleChangeModeButton: UIButton!
    @IBOutlet weak var roundViewObject : CircleViewObject!

    let cameraController = CameraController()
    override var prefersStatusBarHidden: Bool { return true }
    var delegate: CameraCustomControllerDelegate?
    
    
    var userShiftTimer : Timer?
    var videoTimeSeconds = 0.0
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.navigationController?.isNavigationBarHidden = true
        
        cameraController.prepare {(error) in
            if let error = error {
                print(error)
            }
            
            try? self.cameraController.displayPreview(on: self.capturePreviewView)
        }
    
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
    }
    
    fileprivate func setUpVideoView() {
       
        roundViewObject.totalValues = 30
        
        userShiftTimer = Timer.scheduledTimer(timeInterval: 0.1, target: self, selector: #selector(CameraCustomController.updateVideoTimer), userInfo: nil, repeats: true)
        
    }
    
    func updateVideoTimer() {
        
        // Below function will execute if user have shift
        print("stop timer",videoTimeSeconds)
        
        if Int(videoTimeSeconds) >= roundViewObject.totalValues {
            
            print("stop the clock",Int(videoTimeSeconds))
            videoTimeSeconds = 0 //reset the workTime Value
            
            userShiftTimer?.invalidate()
            userShiftTimer = nil
            
        } else {
            videoTimeSeconds = videoTimeSeconds + 0.1
            roundViewObject.circlePathWithCenter(percentageOfCircle: CGFloat(videoTimeSeconds))
            
        }
    }
        
    @IBAction func toggleFlash(_ sender: UIButton) {
        
        if cameraController.flashMode == .on {
            cameraController.flashMode = .off
            if !roundViewObject.isHidden {
               cameraController.toggleTorch(on: false)
            }
            toggleFlashButton.setImage(#imageLiteral(resourceName: "ic_flash_off"), for: .normal)
        } else {
            cameraController.flashMode = .on
            
            if !roundViewObject.isHidden {
                cameraController.toggleTorch(on: true)
            }
            
            toggleFlashButton.setImage(#imageLiteral(resourceName: "ic_flash_on"), for: .normal)
        }
    }
   
    @IBAction func changeModeOfCamera(_ sender: UIButton) {
        
        sender.isSelected = !sender.isSelected
        
        if sender.isSelected {
            //show Video View
            roundViewObject.isHidden = false
            captureButton.isHidden = true
        } else {
            //show Camera View
            roundViewObject.isHidden = true
            captureButton.isHidden = false
        }
    }
    
    @IBAction func captureVideo(_ sender: UIButton) {
        
        sender.isSelected = !sender.isSelected
        
        if sender.isSelected {
            
            //While recording user cant change the mode of video to camera
            self.toggleChangeModeButton.isUserInteractionEnabled = false
            
            //show Video View
            cameraController.startCaptureVideoRecording()
            
            self.setUpVideoView()
            
        } else {
            
            self.toggleChangeModeButton.isUserInteractionEnabled = true

            userShiftTimer?.invalidate()
            userShiftTimer = nil
            roundViewObject.circlePathWithCenter(percentageOfCircle: CGFloat(0.0))
            
            cameraController.stopRecording(completion: { (videoUrl, error) in
                if error == nil {
                    print(videoUrl ?? "no video found")
                    
                    self.showAlertWithMultipleActions(_message: "Do you want to use this Video for Flyer",url: videoUrl, type: CameraMediaType.VideoMedia.rawValue, error: error )
                    return
                }
                self.delegate?.fetchImageAndVideoURL(url: nil, type: CameraMediaType.VideoMedia.rawValue, error: error)
            })
        }
        
    }
    
    func  showAlertWithMultipleActions(_message:String, url:Any?, type:Int, error: Error!) {
        
        
        let alertController = UIAlertController(title: Constants.appTitle.alertTitle, message: _message, preferredStyle: .alert)
        alertController.addAction(UIAlertAction(title: "No", style: .default, handler: nil))
        alertController.addAction(UIAlertAction(title: "Yes", style: UIAlertActionStyle.default)
        { action -> Void in
            
            self.delegate?.fetchImageAndVideoURL(url: url, type:type, error: error)

            self.dismiss(animated: true, completion: nil)
            
        })
        present(alertController, animated: true, completion:nil)
        
    }

    
    @IBAction func switchCameras(_ sender: UIButton) {
        
        do {
            try cameraController.switchCameras()
        } catch {
            print(error)
        }
        
//        switch cameraController.currentCameraPosition {
//        case .some(.front):
////            toggleCameraButton.setImage(#imageLiteral(resourceName: "Front Camera Icon"), for: .normal)
//            
//        case .some(.rear):
////            toggleCameraButton.setImage(#imageLiteral(resourceName: "Rear Camera Icon"), for: .normal)
//            
//        case .none:
//            return
//        }
        
    }
    
    @IBAction func captureImage(_ sender: UIButton) {
        
         cameraController.captureImage {(image, error) in
             guard let image = image else {
                
            self.delegate?.fetchImageAndVideoURL(url: nil, type:CameraMediaType.ImageMedia.rawValue, error: error)
             print(error ?? "Image capture error")
             return
         }
            
            self.showAlertWithMultipleActions(_message: "Do you want to use this Image for Flyer",url: image, type: CameraMediaType.ImageMedia.rawValue, error: error)
            
          }
     }
    
}

